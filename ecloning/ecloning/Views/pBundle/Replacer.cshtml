@{
    ViewBag.Title = "Bundle Replacer";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var bundleObj = ViewBag.BundleSeq;
}

<div class="row">
    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
        <h3 class="text-warning text-center">Sequence Replacer</h3>
    </div>
</div>

<span id="decodeIt" class="hidden"></span>
<div class="alert alert-info alert-dismissible fade in col-xs-12 col-sm-offset-1 col-sm-10" role="alert">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <strong>Howto: </strong>
    <br/>1) The replacer only accepts <span><em>single-stranded</em></span> DNA sequences. All letters or symbols except "a/A", "t/T", "g/G" and "c/C", such as space, line break, number, nonprintable characters <i>etc.</i> will be removed automatically;
    <br/>2) You first need to provide the DNA sequence to be replaced. This DNA sequence must NOT be shorter than <strong class="text-danger">10</strong> letters. The replacer uses the "Exact Match" to find the sequence to be replaced on all the plasmids in the current bundle;
    <br/>3) After that, you will be asked to provide the new DNA sequence that will replace the sequence in the previous step. if you don't provide this sequence, the replacer will remove the DNA sequence provied in the previous step.
    <br/>4) The replacer will ask you to choose what to replace if <strong class="text-danger"><=2</strong> matches are found on a plasmid. If too much matches (>4) found, the plasmid will be ingnored; Increase the length of the DNA sequence to be replaced will reduces the number of matches.
</div>

<div class="row" id="tobereplaced">
    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
        <div class="panel panel-primary" id="old_panel">
            <div class="panel-heading">
                <strong class="text-warning">Step 1</strong>: Provide below the single-stranded DNA sequence to be replaced
            </div>
            <div class="panel-body">
                <p class="text-info">The DNA sequence must NOT be shorter than <strong class="text-danger">10</strong> letters. &nbsp;<span class="text-danger" id="old_msg"></span></p>
                <textarea class="form-control" id="old_dna" rows="5"></textarea>
            </div>
            <div class="panel-footer clearfix">
                <button class="btn btn-default pull-right disabled" id="old_button">
                    <i class="fa fa-chevron-circle-right"></i>
                    <span>Next</span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row hidden" id="new_seq_div">
    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
        <div class="panel panel-primary" id="new_panel">
            <div class="panel-heading">
                <strong class="text-warning">Step 2</strong>: Provide below the single-stranded DNA sequence that will replace the sequence provided in step 1.
            </div>
            <div class="panel-body">
                <p class="text-info">if you don't provide the new DNA sequence, the replacer will remove the DNA sequence provied in step 1.<br /><span class="text-danger" id="new_msg"></span></p>
                <textarea class="form-control" id="new_dna" rows="5"></textarea>
            </div>
            <div class="panel-footer clearfix">
                <button class="btn btn-danger pull-right" id="new_button">
                    <i class="fa fa-chevron-circle-right"></i>
                    <span>Next</span>
                </button>
            </div>
        </div>
    </div>
</div>



<div class="row hidden" id="match_found">
    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
        <div class="panel panel-primary">
            <div class="panel-heading">Matches Overview</div>
            <div class="panel-body">
                <div class="col-xs-offset-1 col-xs-10">
                    <div id="aligment"></div>
                </div>
                <div class="clearfix"></div>
                <div id="match_overview">
                    <p id="match_msg" class="text-danger"></p>
                    <div id="match_selection"></div>
                </div>
            </div>
            <div class="panel-footer clearfix">
                <button class="btn btn-default pull-right disabled" id="match_button">
                    <i class="fa fa-chevron-circle-right"></i>
                    <span>Next</span>
                </button>
            </div>
        </div>
    </div>
</div>



@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/giraffe")
<script src="~/Scripts/msa/msa.min.gz.js"></script>
<script src="~/Scripts/needleman-Wunsch.js"></script>
@*cust funcitons*@
<script src="~/Scripts/ecloning-ali2seq.js"></script>
<script>
    //define array to hold the matches
    var matchedPlasmids = [];



    $(document).ready(function () {
        //get plasmid ids
        var bundleObj = ("@bundleObj");
        document.getElementById("decodeIt").innerHTML = bundleObj;
        bundleObj = document.getElementById("decodeIt").innerText;


        try
        {
            bundleObj = JSON.parse(bundleObj);
            console.log(bundleObj);

            //===================old seq===============================
            //remove all non letter in the seqeuce input
            $('#old_dna').change(function () {
                var before = $('#old_dna').val();
                //strip out non-alpha characters and convert to uppercase
                var after = before.replace(/[^a-zA-Z]+|\s+$|[0-9]+/g, '').toUpperCase();
                after = after.replace(/[bdefhijklmnopqrsuvwxyzBDEFHIJKLMNOPQRSUVWZYX]+|\s+$|[0-9]+/g, '').toUpperCase();
                $('#old_dna').val(after);
                var count = after.length;
                if (count < 10) {
                    $("#old_msg").text("Please provide a DNA sequence no shorter than 10 letters!");

                    if ($("#old_button").hasClass("btn-danger")) {
                        $("#old_button").removeClass("btn-danger");
                    }
                    if (!$("#old_button").hasClass("btn-default")) {
                        $("#old_button").addClass("btn-default");
                    }
                    if (!$("#old_button").hasClass("disabled")) {
                        $("#old_button").addClass("disabled");
                    }
                }
                else {
                    $("#old_msg").text(null);
                    if ($("#old_button").hasClass("btn-default")) {
                        $("#old_button").removeClass("btn-default");
                    }
                    if (!$("#old_button").hasClass("btn-danger")) {
                        $("#old_button").addClass("btn-danger");
                    }
                    if ($("#old_button").hasClass("disabled")) {
                        $("#old_button").removeClass("disabled");
                    }
                }
            });

            $("#old_button").on("click", function () {
                $("#old_dna").prop("readonly", true);
                //change the panel class
                if ($("#old_panel").hasClass("panel-primary")) {
                    $("#old_panel").removeClass("panel-primary");
                    $("#old_panel").addClass("panel-default");
                }
                if (!$("#old_button").hasClass("disabled")) {
                    $("#old_button").addClass("disabled");
                }

                //show the new seq div
                if ($("#new_seq_div").hasClass("hidden")) {
                    $("#new_seq_div").removeClass("hidden");
                }
                scrollTo("#new_seq_div");
            })


            //===================new seq===============================
            //remove all non letter in the seqeuce input
            $('#new_dna').change(function () {
                var before = $('#new_dna').val();
                //strip out non-alpha characters and convert to uppercase
                var after = before.replace(/[^a-zA-Z]+|\s+$|[0-9]+/g, '').toUpperCase();
                after = after.replace(/[bdefhijklmnopqrsuvwxyzBDEFHIJKLMNOPQRSUVWZYX]+|\s+$|[0-9]+/g, '').toUpperCase();
                $('#new_dna').val(after);
            });

            $("#new_button").on("click", function () {
                $("#new_dna").prop("readonly", true);
                //check the new seq
                if ($("#new_dna").length == 0) {
                    $("#new_msg").text("You did not provide the new sequence. The replacer will remove the DNA sequence provided in step 1 in all matched plasmids of the current bundle.");
                }
                else {
                    $("#new_msg").text(null);
                }
                if (!$("#new_button").hasClass("disabled")) {
                    $("#new_button").addClass("disabled");
                }
                //change the panel class
                if ($("#new_panel").hasClass("panel-primary")) {
                    $("#new_panel").removeClass("panel-primary");
                    $("#new_panel").addClass("panel-default");
                }
                //show the match div
                if ($("#match_found").hasClass("hidden")) {
                    $("#match_found").removeClass("hidden");
                }
                scrollTo("#match_found");


                var seq1 = $("#old_dna").val().trim();
                var seq2 = $("#new_dna").val().trim();
                var seq1Name = "Step 1";
                var seq2Name = "Step 2";
                //show the aligment if the new seq is provide
                if ($("#new_dna").length > 0) {                   
                    //align the seq and show the result
                    ali2seq(seq1, seq2, seq1Name, seq2Name, "aligment", "zappo");
                }

                //find matches
                console.log(bundleObj.plasmids);
                $.each(bundleObj.plasmids, function (i, d) {
                    //get the index array
                    var matches = findIndexes(d.sequence, seq1);
                        if (matches.length < 3 && matches.length > 0) {
                            var obj = {};
                            obj.pId = d.pId;
                            obj.pName = d.pName;
                            obj.seqCount = d.seqCount;
                            obj.sequence = d.sequence;
                            obj.features = d.features;
                            obj.matches = matches; //0-based index of the start
                            //generate fake feature
                            var mArray = [];
                            $.each(matches, function (i, m) {                                
                                var mfeature = {};
                                mfeature.clockwise = true;
                                mfeature.cut = null;
                                mfeature.start = matches[i]+1;
                                mfeature.end = matches[i] + seq1.length + 1;
                                mfeature.feature = "To Be Replaced";
                                mfeature.seqCount = d.seqCount;
                                mfeature.show_feature = 1;
                                mfeature.type_id = 5;
                                mArray.push(mfeature);
                            });
                            obj.mfeatures = mArray;
                            
                            //set the first match to be replaced
                            obj.selection = [matches[0]];
                            matchedPlasmids.push(obj);
                        }                                               
                })

                //show match overview of all plasmids, non-match plasmids or >3 matches are not shown
                console.log(matchedPlasmids);
                if (matchedPlasmids.length > 0) {
                    $("#match_msg").text(null);
                    //match_selection
                    var oriMapId;
                    var mMapId1, mMapId2;
                    $.each(matchedPlasmids, function (i, d) {
                        //add dom
                        var html = "<div id=\"match-" + d.pId + "\" class=\"row xScrollable\">";
                                //div for original features
                                oriMapId = "origin-map-" + d.pId;
                                html = html + '<div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 xScrollable" id="origin-map-' + d.pId + '"></div>';
                                //div for the matched option, can be max 2 options
                                mMapId1 = 'matched-map-' + d.pId + '-1';
                                mMapId2 = 'matched-map-' + d.pId + '-2';
                                html = html + '<div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 xScrollable" id="matched-map-' + d.pId + '-1"></div>';
                                html = html + '<div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 xScrollable" id="matched-map-' + d.pId + '-2"></div>';
                            html = html+"</div><div class=\"clearfix\"></div>";
                        $("#match_selection").append(html);

                        //draw original ma
                        drawMap(d.pName, d.seqCount, d.features, oriMapId, 468, 448);
                        //draw matched maps
                        if (d.mfeatures.length == 1) {
                            drawMap(d.pName, d.seqCount, [d.mfeatures[0]], mMapId1, 400, 448);
                        }
                        if (d.mfeatures.length ==2) {
                            drawMap(d.pName, d.seqCount, [d.mfeatures[1]], mMapId2, 500, 548);
                        }
                    })
                    
                }
                else {
                    $("#match_msg").text("No match is found, nothing to replace. Refresh the page to start again.");
                }
            })

            //=====================match results=======================
            //show the aligmentd

        }
        catch (e) {
            console.log(e);
        }
    });
    
</script>





<script>
    function scrollTo(id) {
        $('html, body').animate({
            scrollTop: $(id).offset().top
        }, 1000);
    }

    //find all the indexes
    function findIndexes(fullSeq, subSeq) {
        var array = [];
        for (var index = 0; index < (fullSeq.length - subSeq.length); index += subSeq.length)
        {
            index = fullSeq.indexOf(subSeq, index);
            if (index == -1)
                return array;
            array.push(index);
        }
    }

    function drawMap(pName, pCount, features, mapId, width, height) {          
            var fData = [pCount, features];
            width = ($("#" + mapId).width() <= width ? width : $("#" + mapId).width());
            //draw the map
            var gd = GiraffeDraw();
            gd.read(fData);
            gd.CircularMap({
                'map_dom_id': mapId,
                'plasmid_name': pName,
                'map_width': width,
                'map_height': height
            });
    };
</script>