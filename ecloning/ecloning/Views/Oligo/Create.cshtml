@model ecloning.Models.mOligo
@{
    ViewBag.Title = "Add Oligo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-sm-offset-1 col-sm-3 col-xs-6">
        <h3 class="text-warning"><i class="fa fa-plus-circle"></i> Oligo</h3>
    </div>
    <div class="col-sm-5 col-xs-6" style="position:relative;top:15px;">
        <a href="@Url.Action("Index", "Oligo")" class="btn btn-default">
            <i class="fa fa-caret-left"></i>
            <span>Cancel</span>
        </a>
    </div>
</div>

<div class="col-xs-12 col-sm-offset-1 col-sm-10">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group required">
                    @Html.LabelFor(model => model.sequence, "Sequence", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.sequence, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.sequence, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.modification, "Modification", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.modification, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.modification, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.location, "Location", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.location, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    <p class="text-danger" id="error"></p>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.company, "Company", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.company, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.company, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.orderref, "Order#", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.orderref, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.orderref, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.des, 3, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-4 col-sm-4 col-lg-2">
                        <input type="submit" value="Add Oligo" class="btn btn-primary" id="addprimer" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        //remove all non letter in the seqeuce input
        $('#sequence').change(function () {
            var before = $('#sequence').val();
            //strip out non-alpha characters and convert to uppercase
            var after = before.replace(/[^a-zA-Z]+|\s+$|[0-9]+/g, '').toUpperCase();
            after = after.replace(/[bdefhijklmnopqrsuvwxyzBDEFHIJKLMNOPQRSUVWZYX]+|\s+$|[0-9]+/g, '').toUpperCase();
            $('#sequence').val(after);
        });
    });
</script>