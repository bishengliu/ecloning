
@{
    ViewBag.Title = "Overview";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Features = ViewBag.Features;
    var fLabels = ViewBag.fLabels;
}

<div class="row">
    <div class="col-xs-offset-1 col-sm-offset-1 col-sm-3">
        <h3 class="text-warning">Plasmids by Features</h3>
    </div>
    <div class="col-xs-12 col-sm-4 col-md-3 col-md-offset-1 col-lg-2 col-lg-offset-3">
        <div class="pull-right">
            <br class="hidden-xs" />
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                <input id="searchFeature" type="text" class="form-control" placeholder="Search features...">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" id="clearFeature">
                        <i class="fa fa-remove"></i>
                    </button>
                </span>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-4 col-md-3 col-lg-2">
        <div class="pull-right">
            <br class="hidden-xs"/>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                <input id="searchPlasmid" type="text" class="form-control" placeholder="Search plasmids...">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" id="clearText">
                        <i class="fa fa-remove"></i>
                    </button>
                </span>
            </div>
        </div>
    </div>
</div>

<span id="decodeIt" class="hidden"></span>
<br/>
<div class="row">
    <div class="hidden-xs hidden-sm col-md-1">

    </div>
    <div class="col-xs-12 col-sm-12 col-md-10">
        <div id="overview">

        </div>
    </div>
    <div class="hidden-xs hidden-sm col-md-1">

    </div>
</div>

<div class="alert alert-success navbar-fixed-bottom" id="success-alert">
    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
    <span>&nbsp;&nbsp;</span><span class="fa fa-info-circle"></span>&nbsp;Click the feature name to sort the column; click the plasmid name to sort the row.
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/giraffe")
@Scripts.Render("~/bundles/d3")

<script>
    $("#success-alert").fadeTo(20000, 500).slideUp(500, function () {
        $("#success-alert").alert('close');
    });
</script>
<script>

    var fLabels = ("@fLabels");
    document.getElementById("decodeIt").innerHTML = fLabels;
    fLabels = document.getElementById("decodeIt").innerText;


    var Features = ("@Features");
    document.getElementById("decodeIt").innerHTML = Features;
    Features = document.getElementById("decodeIt").innerText;

    try {
        fLabels = JSON.parse(fLabels);
        Features = JSON.parse(Features);
    }
    catch (e) {
        console.log(e);
    }

    var margin = { top: 20, right: 200, bottom: 0, left: 20 },
        width = ($("#overview").width() <= 250 ? 250 : $("#overview").width()) - 20 - margin.left - margin.right;
	    height = 650;
	    var padding = 0.5;

    var x = d3.scale.ordinal()
        .domain(fLabels)
	    .rangeRoundPoints([0, width], padding);


    var xAxis = d3.svg.axis()
	            .scale(x)
	            .orient("top");


    var nData = d3.nest()
              .key(function (d) { return d.pName; })
              .key(function (d) { return d.pSeqCount; })
               .entries(Features);
    height = 80 + nData.length * 25;
    var svg = d3.select("#overview").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	    .style("margin-left", margin.left + "px")
	    .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
    var c = nData.length <= 10 ? d3.scale.category20() : d3.scale.category20c();

    //feature tooltip
    var tooltip = d3.select("body")
	    .append("div")
        .attr('class', 'feature-tip')
	    .style("position", "absolute")
	    .style("z-index", "10")
        .style("opacity", 0);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + 80 + ")")
        .call(xAxis)
        .selectAll("text")
        .attr("class", "tickLable")
        .attr("y", -10)
        .attr("x", 10)
        .attr("dy", ".35em")
        .attr("transform", "rotate(-45)")
        .style("text-anchor", "start")
        .on("click", sortPlasmid)
        .on("mouseover", mouseoverTickText)
        .on("mouseout", mouseoutTickText);
    

    draw(nData, svg, x, c);


    //redraw the chart when resize the window
    $(window).resize(function () {
        console.log("changing window...")
        width = ($("#overview").width() <= 250 ? 250 : $("#overview").width()) - 20 - margin.left - margin.right;

        x.rangeRoundPoints([0, width], padding);

        xAxis.scale(x);
        svg.transition()
           .delay(500)
           .duration(2000)
           .attr("width", width + margin.left + margin.right);

        svg.call(xAxis).selectAll("text")
        .attr("class", "tickLable")
        .attr("y", -10)
        .attr("x", 10)
        .attr("dy", ".35em")
        .attr("transform", "rotate(-45)")
        .style("text-anchor", "start")
        .on("click", sortPlasmid)
        .on("mouseover", mouseoverTickText)
        .on("mouseout", mouseoutTickText);
        //remove previous chart
        d3.selectAll(".plasmid").remove();
        //redra the chart
        draw(nData, svg, x, c);
    });

    function draw(nData, svg, x, c)
    {
        
        for (var j = 0; j < nData.length; j++) {
            var g = svg.append("g").attr("class", "plasmid")
                    .data(nData[j]['values'][0]['values'])
                    .attr("id", function (d) { return "plasmid" + d['pId']; })
                    .attr("transform", "translate(0," + 80 + ")");


            var circles = g.selectAll("circle")
                .data(nData[j]['values'][0]['values'])
                .enter()
                .append("circle");

            var text = g.selectAll("text")
                .data(nData[j]['values'][0]['values'])
                .enter()
                .append("text");

            var rScale = d3.scale.linear()
                .domain([0, d3.max(nData[j]['values'][0]['values'], function (d) { return d['fLength']; })])
                .range([2, 9]);

            var rpScale = d3.scale.linear()
                .domain([0, 1])
                .range([0, 100]);

            //circles
            circles
                .attr("cx", function (d, i) { return x(d['feature']); })
                .attr("cy", j * 20 + 20)
                .attr("r", function (d) { return rScale(d['fLength']); })
                .attr("class", function (d, i) { return d['feature']; })
                .style("fill", function (d) { return c(j); })
                .on("mouseover", function (d) {
                        tooltip.transition()
                             .duration(200)
                             .style("opacity", .9);
                    tooltip.html(d['feature'])
                             .style("left", (d3.event.pageX + 10) + "px")
                             .style("top", (d3.event.pageY - 50) + "px");
                    })
                .on("mouseout", function (d) {
                    tooltip.transition()
                         .duration(500)
                         .style("opacity", 0);
                });

            //plasmid length % numbers
            text
                .attr("y", j * 20 + 25)
                .attr("x", function (d, i) { return x(d['feature']); })
                .attr("class", "value")
                .text(function (d) { return d3.round(rpScale(d['fLength'] / nData[j]['values'][0]['key']), 1); })
                .style("fill", function (d) { return c(j); })
                .style("display", "none");

            //plasmid title
            g.append("text")
                .attr("y", j * 20 + 25)
                .attr("x", width + 20)
                .attr("class", "label")
                .attr("id", function (d) { return nData[j]['key']+ "-" + d['pId']; }) //there is a dash between
                .text(truncate(nData[j]['key'] + " (" + nData[j]['values'][0]['key'] + "bp)"), 20, "...")
                .style("fill", function (d) { return c(j); })
                .on("click", sortTick)
                .on("mouseover", mouseover)
                .on("mouseout", mouseout);

        };
    }

    function mouseover(p) {
        
        var g = d3.select(this).node().parentNode;
        d3.select(g).selectAll("circle").style("display", "none");
        d3.select(g).selectAll("text.value").style("display", "block");      
    }

    function mouseout(p) {

        var g = d3.select(this).node().parentNode;
        d3.select(g).selectAll("circle").style("display", "block");
        d3.select(g).selectAll("text.value").style("display", "none");
    }

    function truncate(str, maxLength, suffix) {
        if (str.length > maxLength) {
            str = str.substring(0, maxLength + 1);
            str = str.substring(0, Math.min(str.length, str.lastIndexOf(" ")));
            str = str + suffix;
        }
        return str;
    }

    function mouseoverTickText(p) {
        d3.select(this)
            .style("font-size", "12px")
            .style("fill", "red");
    }
    function mouseoutTickText(p) {
        d3.select(this)
            .style("font-size", "10px")
            .style("fill", "#999");
    }

    function sortPlasmid(event) {
        var tg = d3.event.target;
        var txt = d3.select(tg).text();
        var fNumber = d3.format(".10f");
        //sort nData
        nData.forEach(function(d, i){
            
            d['values'][0]['values'].forEach(function (fd, fi) {
                fd.order = 0;
                if (fd['feature'] === txt) {
                    fd.order = fNumber(fd.fLength / fd.pSeqCount);
                }
            });
            //move the clicked feature to the first feature in the plasmid, if it has the feature
            d['values'][0]['values'].sort(function (a, b) { return b['order'] - a['order']; })
        });

        //sort plasmid
        nData.sort(function (a, b) { return b['values'][0]['values'][0]['order'] - a['values'][0]['values'][0]['order']; });
        
        //remove previous chart
        d3.selectAll(".plasmid").remove();
        //redra the chart
        draw(nData, svg, x, c);

    }

    function sortTick(event) {
        var tg = d3.event.target;
        var txt = d3.select(tg).property("id");
        //get the plasmid Id 
        var plasmidId = txt.split('-');
        var pId = parseInt(plasmidId[plasmidId.length - 1]);
        //get all the feaures of this plasmid
        var pFeatures = [];
        nData.forEach(function (d, i) {
            if (d['values'][0]['values'][0]['pId'] === pId) {
                d['values'][0]['values'].forEach(function (fd, fi) {
                    pFeatures.push(fd['feature']);
                });
            };
        });
        //remove the pFeature from the fLabels
        var newLabels = [];
        fLabels.forEach(function (d, i) {
            if ($.inArray(d, pFeatures) == -1) {
                newLabels.push(d);
            }
        });
        //add the pFeature to the newLabels
        pFeatures.forEach(function (d, i) {
            newLabels.push(d);
        });
        fLabels = newLabels;

        //update the x.domain() and axis

        x.domain(fLabels);
        xAxis.scale(x);

        svg.call(xAxis).selectAll("text")
        .attr("class", "tickLable")
        .attr("y", -10)
        .attr("x", 10)
        .attr("dy", ".35em")
        .attr("transform", "rotate(-45)")
        .style("text-anchor", "start")
        .on("click", sortPlasmid)
        .on("mouseover", mouseoverTickText)
        .on("mouseout", mouseoutTickText);

        //remove previous chart
        d3.selectAll(".plasmid").remove();
        //redra the chart
        draw(nData, svg, x, c);
    }

</script>
<script>
    
    $(function () {
        //search plasmids
        $('#searchPlasmid').keyup(function () {
            var _text = $(this).val().toLowerCase().replace(/\s+/g, '');
            $('.plasmid').each(function () {
                $(this).removeClass("hidden");
                $(this).addClass("hidden");
                var _aText = $(this).children('text').last().text().toLowerCase().replace(/\s+/g, '');
                if (RegExp('^' + _text).test(_aText) || _aText.indexOf(_text) >= 0) {
                    $(this).removeClass("hidden");
                    $(this).fadeIn(400);
                };
            });
        });

        $('#clearText').click(function (e) {
            e.preventDefault();
            $('#searchPlasmid').val('');
            $('.plasmid').each(function () {
                $(this).removeClass("hidden");
                $(this).fadeIn(400);
            });
        });
        //search features
        $('#searchFeature').keyup(function () {
            var _text = $(this).val().toLowerCase().replace(/\s+/g, '');
            if (_text.length === 0) {
                $('.tickLable').each(function () {
                    $(this).removeClass("highlighted"); 
                });
            }
            else
            {
                $('.tickLable').each(function () {
                    $(this).removeClass("highlighted");
                    var _aText = $(this).text().toLowerCase().replace(/\s+/g, '');
                    if (RegExp('^' + _text).test(_aText) || _aText.indexOf(_text) >= 0) {
                        $(this).addClass("highlighted");
                        $(this).fadeIn(400);
                    };
                });
            }

        });
        $('#clearFeature').click(function (e) {
            e.preventDefault();
            $('#searchFeature').val('');
            $('.tickLable').each(function () {
                $(this).removeClass("highlighted");
                $(this).fadeIn(400);
            });
        });
    });

    
</script>