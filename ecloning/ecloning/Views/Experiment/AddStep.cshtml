@model ecloning.Models.ExpStep
@{
    ViewBag.Title = "Add Step";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int expId = ViewBag.expId;
    var Plasmids = ViewBag.Plasmids;
    var Protocols = ViewBag.Protocols;
    var Fragments = ViewBag.Fragments;
    var ShownStep = ViewBag.ShownStep;
    var FragmentMap = ViewBag.FragmentMap;
    var Primers = ViewBag.Primers;
    var Probes = ViewBag.Probes;
}
<span id="decodeIt" class="hidden"></span>
<span id="ShownStep" class="hidden">@ShownStep</span>
<div class="row">
    <div class="col-sm-offset-1 col-sm-5 col-xs-6">
        <h3 class="text-warning"><i class="fa fa-flask"></i> Experiment Step</h3>
    </div>
    <div class="col-sm-5 col-xs-6">
        <h3 class="pull-right">
            <a href="@Url.Action("Details", "Experiment", new { id= expId })" class="btn btn-default">
                <i class="fa fa-caret-left"></i>
                <span>Experiments</span>
            </a>
        </h3>
    </div>
</div>
<div id="steps" class="">
    <div class="clearfix"></div>
    <div class="input-group col-xs-12 col-sm-offset-7 col-sm-4">
        <span class="input-group-addon">EXPERIMENT STEPS</span>
        @Html.DropDownList("types", null, "--  Select  --", htmlAttributes: new { @class = "form-control" })
        <span class="input-group-btn">
            <button class="btn btn-secondary btn-danger" type="button" id="add_exp_step"><i class="fa fa-plus-circle"></i></button>
        </span>
    </div>
    <div class="clearfix"></div>
    <div class="input-group col-xs-12 col-sm-offset-7 col-sm-4 pull-right">        
        <p class="text-danger" id="step-error"></p>
    </div>
</div>



<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type2">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Plasmid Transformation</i></h3>
    <br/>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value="2" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.plasmid_id, "Plasmid", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.plasmid_id, new { htmlAttributes = new { @class = "form-control plasmid" } })
                        @Html.ValidationMessageFor(model => model.plasmid_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add2" name="StepButton" value="add2"><i class="fa fa-plus-circle"></i><span> Transformation</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type3">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Plasmid Miniprep</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "3" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.plasmid_id, "Plasmid", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.plasmid_id, new { htmlAttributes = new { @class = "form-control plasmid" } })
                        @Html.ValidationMessageFor(model => model.plasmid_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add3" name="StepButton" value="add3"><i class="fa fa-plus-circle"></i><span> Miniprep</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type8">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Plasmid Maxiprep</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "8" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.plasmid_id, "Plasmid", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.plasmid_id, new { htmlAttributes = new { @class = "form-control plasmid" } })
                        @Html.ValidationMessageFor(model => model.plasmid_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add8" name="StepButton" value="add8"><i class="fa fa-plus-circle"></i><span> Maxiprep</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type7">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Pick Colonies</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "7" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add7" name="StepButton" value="add7"><i class="fa fa-plus-circle"></i><span> Pick Colonies</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type4">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Fragment Gel Extraction</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "4" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.frag1_id, "Fragment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.frag1_id, new { htmlAttributes = new { @class = "form-control fragment" } })
                        @Html.ValidationMessageFor(model => model.frag1_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add4" name="StepButton" value="add4"><i class="fa fa-plus-circle"></i><span> Gel Extraction</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type5">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>PCR</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "5" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.plasmid_id, "Plasmid", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.plasmid_id, new { htmlAttributes = new { @class = "form-control plasmid" } })
                        @Html.ValidationMessageFor(model => model.plasmid_id, "", new { @class = "text-danger" })
                    </div>
                    <a class="btn btn-primary btn-sm col-xs-offset-1 col-sm-offset-1 col-md-offset-1 col-lg-offset-0" id="useFragment" data-toggle="tooltip" data-placement="top" title="Use fragment as PCR template"><span>Fragment</span></a>
                </div>
                <div class="form-group required hidden">
                    @Html.LabelFor(model => model.frag1_id, "Fragment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.frag1_id, new { htmlAttributes = new { @class = "form-control fragment" } })
                        @Html.ValidationMessageFor(model => model.frag1_id, "", new { @class = "text-danger" })
                    </div>
                    <a class="btn btn-primary btn-sm col-xs-offset-1 col-sm-offset-1 col-md-offset-1 col-lg-offset-0" id="usePlasmid" data-toggle="tooltip" data-placement="top" title="Use plasmid as PCR template"><span>Plasmid</span></a>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.forward_primer_id, "Forward Primer", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.forward_primer_id, new { htmlAttributes = new { @class = "form-control primer" } })
                        @Html.ValidationMessageFor(model => model.forward_primer_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.reverse_primer_id, "Reverse Primer", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.reverse_primer_id, new { htmlAttributes = new { @class = "form-control primer" } })
                        @Html.ValidationMessageFor(model => model.reverse_primer_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.probe_id, "Probe", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.probe_id, new { htmlAttributes = new { @class = "form-control probe" } })
                        @Html.ValidationMessageFor(model => model.probe_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 8, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add5" name="StepButton" value="add5"><i class="fa fa-plus-circle"></i><span> PCR</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@*fragment div*@
<div class="col-xs-12 col-sm-offset-1 col-sm-10">
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 hidden" id="fragment1">
        <div class="panel panel-primary" id="frag1">
            <div class="panel-heading text-center" id="frag1-header"></div>
            <div class="panel-body fixed-panel">
                <div id="frag1-map" class="col-xs-12 max-width"></div>
                <div class="navbar-fixed-bottom" style="position:relative; left:-99999px;">
                    <input id="frag1-fId" value="" />
                    <input id="frag1-cId" value="" />
                </div>
                <div id="frag1-end" class="col-xs-12"></div>
                <br />
                <p id="frag1-msg" class="text-info"></p>
            </div>
            <div class="panel-footer clearfix">
                <a class="btn btn-default" data-clipboard-action="copy" data-clipboard-target="#frag1-fId" id="frag1-fcopy" data-toggle="tooltip" title="Copy Forward Sequence">
                    <i class="fa fa-copy text-danger"></i>
                </a>
                <a class="btn btn-default" data-clipboard-action="copy" data-clipboard-target="#frag1-cId" id="frag1-ccopy" data-toggle="tooltip" title="Copy Complement Sequence">
                    <i class="fa fa-copy text-primary"></i>
                </a>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 hidden" id="fragment2">
        <div class="panel panel-primary" id="frag2">
            <div class="panel-heading text-center" id="frag2-header"></div>
            <div class="panel-body fixed-panel">
                <div id="frag2-map" class="col-xs-12 max-width"></div>
                <div class="navbar-fixed-bottom" style="position:relative; left:-99999px;">
                    <input id="frag2-fId" value="" />
                    <input id="frag2-cId" value="" />
                </div>
                <div id="frag2-end" class="col-xs-12"></div>
                <br />
                <br />
                <br />
                <p id="frag2-msg" class="text-info"></p>
            </div>
            <div class="panel-footer clearfix">
                <a class="btn btn-default" data-clipboard-action="copy" data-clipboard-target="#frag2-fId" id="frag2-fcopy" data-toggle="tooltip" title="Copy Forward Sequence">
                    <i class="fa fa-copy text-danger"></i>
                </a>
                <a class="btn btn-default" data-clipboard-action="copy" data-clipboard-target="#frag2-cId" id="frag2-ccopy" data-toggle="tooltip" title="Copy Complement Sequence">
                    <i class="fa fa-copy text-primary"></i>
                </a>
            </div>
        </div>
    </div>
</div>



<div class="col-xs-12 col-sm-offset-1 col-sm-10 hidden" id="type1">
    <hr class="tableTopLine" />
    <h3 class="text-capitalize text-center text-info"><i>Restriction Enzyme Digestion</i></h3>
    <br />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group required">
                    @Html.LabelFor(model => model.name, "Name", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.type_id, "TypeId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.type_id, new { htmlAttributes = new { @class = "form-control", @Value = "1" } })
                        @Html.ValidationMessageFor(model => model.type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(model => model.exp_id, "ExpId", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.exp_id, new { htmlAttributes = new { @class = "form-control", @Value = expId } })
                        @Html.ValidationMessageFor(model => model.exp_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.plasmid_id, "Plasmid", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.plasmid_id, new { htmlAttributes = new { @class = "form-control plasmid" } })
                        @Html.ValidationMessageFor(model => model.plasmid_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.protocol_id, "Protocol", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.EditorFor(model => model.protocol_id, new { htmlAttributes = new { @class = "form-control protocol" } })
                        @Html.ValidationMessageFor(model => model.protocol_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="display: inline-block">
                <div class="form-group">
                    @Html.LabelFor(model => model.des, "Comment", htmlAttributes: new { @class = "control-label col-md-3 col-lg-4" })
                    <div class="col-md-8 col-lg-6">
                        @Html.TextAreaFor(model => model.des, 6, 150, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.des, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-lg-offset-4 col-md-8 col-lg-6">
                        <div class="pull-right">
                            <button class="btn btn-danger" id="add1" name="StepButton" value="add1"><i class="fa fa-plus-circle"></i><span> Digestion</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@*
    still need to add ligation and gel extraction
//need to validate form
*@
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/giraffe")
@Scripts.Render("~/bundles/d3")
<script src="~/Scripts/clipboard/clipboard.min.js"></script>
<script src="~/Scripts/ecloning-fragment.js"></script>
<script>

    var stepShown = +$("#ShownStep").text();
    if (stepShown != -1 && stepShown != "") {
        var id = "type" + stepShown;
        $("#" + id).removeClass("hidden");
        $("#steps").addClass("hidden");
    }

    var Plasmids = ("@Plasmids");
    document.getElementById("decodeIt").innerHTML = Plasmids;
    Plasmids = document.getElementById("decodeIt").innerText;

    var Protocols = ("@Protocols");
    document.getElementById("decodeIt").innerHTML = Protocols;
    Protocols = document.getElementById("decodeIt").innerText;

    var Fragments = ("@Fragments");
    document.getElementById("decodeIt").innerHTML = Fragments;
    Fragments = document.getElementById("decodeIt").innerText;

    var FragmentMap = ("@FragmentMap");
    document.getElementById("decodeIt").innerHTML = FragmentMap;
    FragmentMap = document.getElementById("decodeIt").innerText;

    var Primers = ("@Primers");
    document.getElementById("decodeIt").innerHTML = Primers;
    Primers = document.getElementById("decodeIt").innerText;

    var Probes = ("@Probes");
    document.getElementById("decodeIt").innerHTML = Probes;
    Probes = document.getElementById("decodeIt").innerText;

    try {
        Plasmids = JSON.parse(Plasmids);
        Protocols = JSON.parse(Protocols);
        Fragments = JSON.parse(Fragments);
        FragmentMap = JSON.parse(FragmentMap);
        Primers = JSON.parse(Primers);
        Probes = JSON.parse(Probes);
        $(document).ready(function () {
            $(".token-input-list-facebook").addClass('token-input-list-facebook form-control text-box single-line');
        });

        $(document).ready(function () {
            //show tooltip
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
            $(".plasmid").each(function (i, el) {
                $(el).tokenInput(Plasmids, {
                    theme: 'facebook',
                    hintText: 'Type in plasmid name',
                    tokenLimit: 1,
                    propertyToSearch: "name",
                    resultsFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + " </b></p></li>" },
                    tokenFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + "</b></p></li>" },
                });
            });
            $(".protocol").each(function (i, el) {
                $(el).tokenInput(Protocols, {
                    theme: 'facebook',
                    hintText: 'Type in protocol name',
                    tokenLimit: 1,
                    propertyToSearch: "name",
                    resultsFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + " </b><span style='color: gray'>" + " (V" + item.version + ")</span></p></li>" },
                    tokenFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + "</b><span style='color: gray'>" + " (V" + item.version + ")</span></p></li>" },
                });
            });

            $(".fragment").each(function (i, el) {
                $(el).tokenInput(Fragments, {
                    theme: 'facebook',
                    hintText: 'Type in fragment name',
                    tokenLimit: 1,
                    onAdd: function (item) {
                        drawFragment(item.id);
                        console.log("Added " + item.id);
                    },
                    onDelete: function (item) {
                        removeFragment();
                        console.log("Deleted " + item.id);
                    },
                    propertyToSearch: "name",
                    resultsFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + " </b><span style='color: gray'>" + item.pos + ")</span></p></li>" },
                    tokenFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + "</b><span style='color: gray'>" + item.pos + ")</span></p></li>" },
                });
            });

            $(".primer").each(function (i, el) {
                $(el).tokenInput(Primers, {
                    theme: 'facebook',
                    hintText: 'Type in primer name',
                    tokenLimit: 1,
                    propertyToSearch: "name",
                    resultsFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + " </b></p></li>" },
                    tokenFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + "</b></p></li>" },
                });
            });

            $(".probe").each(function (i, el) {
                $(el).tokenInput(Probes, {
                    theme: 'facebook',
                    hintText: 'Type in probe name',
                    tokenLimit: 1,
                    propertyToSearch: "name",
                    resultsFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + " </b></p></li>" },
                    tokenFormatter: function (item) { return "<li><p><b style='color: red'>" + item.name + "</b></p></li>" },
                });
            });


        })

    }
    catch (e) {
        console.log(e);
    }



    //add step
    $("#add_exp_step").click(function () {
        var exp_type = $("#types").val();
        if (exp_type != "" || exp_type > 0) {
            $("#steps").addClass("hidden");
            addStep(exp_type);
        }
        else {
            console.log("please select a value...");
            $("#step-error").text("Please select a step!")
        }
    })

    function addStep(exp_type) {
        /*
                type1.Name = "Restriction Enzyme Digestion";
            type2.Name = "Plasmid Transformation";
            type3.Name = "Plasmid Miniprep";
            type4.Name = "Fragment Gel Extraction";
            type5.Name = "PCR";
                type6.Name = "Ligation";
            type7.Name = "Pick Colonies";
            type8.Name = "Plasmid Maxiprep";
        */
        if (exp_type == 2) {
            $("#type2").removeClass("hidden");
        }
        if (exp_type == 3) {
            $("#type3").removeClass("hidden");
        }
        if (exp_type == 7) {
            $("#type7").removeClass("hidden");
        }
        if (exp_type == 8) {
            $("#type8").removeClass("hidden");
        }
        if (exp_type == 4) {
            $("#type4").removeClass("hidden");
        }
        if (exp_type == 5) {
            $("#type5").removeClass("hidden");
        }
    }

    function drawFragment(fragId) {
        //fisr check which fragment is it now
        var currentFrag = 0;
        if ($("#fragment1").hasClass("hidden")) {
            currentFrag = 1;
        }
        else if (!$("#fragment1").hasClass("hidden") && $("#fragment2").hasClass("hidden")) {
            currentFrag = 2;
        }
        else {
            currentFrag = 0;
        }

        $.each(FragmentMap, function (i, d) {
            if (+d.id === +fragId) {
                var size = +d.fSeq.length;
                var features = d.featureArray;
                var id = "frag" + currentFrag + "-map";
                var enzymes = d.enzymes[0] == d.enzymes[1] ? d.enzymes[0] : d.enzymes[0] + ", " + d.enzymes[1];
                var fname = name + " (" + enzymes + ", " + d.f_start + "-" + d.f_end + ")";
                var width = 450;
                drawLinearMap(features, id, d.fName, size, width);
                //set panel name header
                $("#frag" + currentFrag + "-header").text(d.fName);

                //set fSeq and cSeq
                $("#frag" + currentFrag + "-fId").val(d.fSeq);
                $("#frag" + currentFrag + "-cId").val(d.cSeq);
                //prepare to copy seq
                //copy seq using clipboard.min.js
                var clipboard = new Clipboard("#frag" + currentFrag + "-fcopy");
                clipboard.on('success', function (e) {
                    $("#frag" + currentFrag + "-msg").text("Sequence Copied!");
                    console.info('Action:', e.action);
                    e.clearSelection();
                    setTimeout(function () { $("#frag" + currentFrag + "-msg").text(null); }, 2000);
                });

                var clipboard = new Clipboard("#frag" + currentFrag + "-ccopy");
                clipboard.on('success', function (e) {
                    console.info('Action:', e.action);
                    e.clearSelection();
                    $("#frag" + currentFrag + "-msg").text("Sequence Copied!");
                    setTimeout(function () { $("#frag" + currentFrag + "-msg").text(null); }, 2000);
                });
                //draw end
                drawEndSeq("frag" + currentFrag + "-end", d.fSeq, d.cSeq, d.overhangs, 10)
            }
        })
        $("#fragment" + currentFrag).removeClass("hidden");
    }

    function removeFragment() {
        //fisr check which fragment is it now
        var currentFrag = 0;
        if (!$("#fragment1").hasClass("hidden") && !$("#fragment2").hasClass("hidden")) {
            currentFrag = 2;
        }
        else {
            currentFrag = 1;
        }

        $("#fragment" + currentFrag).addClass("hidden");
        $("#frag" + currentFrag + "-map").empty();
    }

    $("#usePlasmid").click(function (e) {
        e.preventDefault();
        $(this).parent().addClass("hidden");
        $(this).parent().prev().removeClass("hidden");
    })
    $("#useFragment").click(function (e) {
        e.preventDefault();
        $(this).parent().addClass("hidden");
        $(this).parent().next().removeClass("hidden");
    })
</script>