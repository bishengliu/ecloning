
@{
    ViewBag.Title = "Edit Plasmid Sequence";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Sequence = ViewBag.Seq;
}

<div class="row">
    <div class="col-xs-offset-1 col-sm-offset-1 col-sm-3">
        <h3 class="text-warning">Sequence Editor</h3>
    </div>
    <div class="col-xs-12 col-sm-4 col-md-3 col-md-offset-1 col-lg-2 col-lg-offset-3">
        <div class="pull-right">
            <br class="hidden-xs" />
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                <input id="searchSeq" type="text" class="form-control" placeholder="Search sequence...">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" id="clearText">
                        <i class="fa fa-remove"></i>
                    </button>
                </span>
            </div>
        </div>
    </div>

</div>

<span id="decodeIt" class="hidden"></span>

<span id="seq" class="hidden">@Sequence</span>
<div class="col-xs-12">
    <div id="seq-editor">

    </div>
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/d3")

<style>
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .axis text {
        fill: #000;
    }

    .axis .tick line {
        stroke: rgba(0, 0, 0, 0.1);
        stroke-width: .5px;
    }

    .letter, .nletter {
        font-family: monospace;
        font-size: 13px;
        font-weight: bold;
    }

    .noselect {
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Chrome/Safari/Opera */
        -khtml-user-select: none; /* Konqueror */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
        user-select: none; /* Non-prefixed version, currently
                                  not supported by any browser */
    }
</style>

<script>
    //this script is used to generate seq editor for ecloing project
    //get original seq
    var seq = $('#seq').text().trim().toUpperCase();
    //convert the seq to arary
    var seqArray = seq.split('');
    var seq_len = seqArray.length;
    //console.log(seqArray);

    //prepare svg
    var margin = { top: 50, right: 40, bottom: 60, left: 40 },
        width = ($("#seq-editor").width() <= 250 ? 250 : $("#seq-editor").width()) - margin.left - margin.right;
    var padding = 1.0; //half of the step
    var r = 10; //radius of the circle
    var pr = 1; //point
    //using d3 rangePoints
    var step = 2 * r; //distance between 2 necleotides
    var numCol = Math.floor(width / step); //number of nucleotides per line
    var arrCol = genArray(numCol);
    var numRow = Math.round(seq_len / numCol);
    var arrRow = genArray(numRow);
    //height of svg
    var height = numRow * (step * 3); //step in vertical is half of the horizontal

    //console.log(seqObj);

    var x = d3.scale.ordinal()
              .domain(arrCol)
              .rangePoints([1, width], padding);
    var y = d3.scale.ordinal()
              .domain(arrRow)
              .rangePoints([1, height], padding);
    var xRange = x.range()[1] - x.range()[0];
    var yRange = y.range()[1] - y.range()[0];
    //process the seq data
    var seqObj = genSeqObj(seqArray, seq_len, numCol, numRow, xRange, yRange);

    var color = d3.scale.ordinal()
                  .domain(["A", "T", "G", "C"])
                  .range(["#3366cc", "#dc3912", "#ff9900", "#109618"]);
    var xAxis = d3.svg.axis()
                .scale(x)
                .innerTickSize(-height).outerTickSize(0).tickPadding(10)
                .orient("bottom");
    var yAxis = d3.svg.axis()
                .scale(y)
                .innerTickSize(-width).outerTickSize(0).tickPadding(10)
                .tickFormat(function (d) { return d==1? d: (d-1) * numCol+1;})
                .orient("left");
    var svg = d3.select("#seq-editor").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
              .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //svg.append("g")
    //  .attr("class", "x axis")
    //  .attr("transform", "translate(0," + height + ")")
    //  .call(xAxis);
    //svg.append("g")
    //  .attr("class", "y axis")
    //  .call(yAxis);

    //console.log(seqObj);
    //draw circles
    var g = svg.append("g").attr("class", "unit");

    var points = g.selectAll(".point")
                     .data(seqObj)
                  .enter()
                     .append("circle");
    var pointsAttributes = points
                            .attr("class", "point")
                            .attr("id", function (d) { return d[1] + "-point" })
                            .attr("cx", function (d) { return d[2]; })
                            .attr("cy", function (d) { return d[3]+25; })
                            .attr("r", pr)
                            .attr("display", function (d) { return d[1] % 5 === 0 ? "none" : "inline "; })
                            //.style("stroke", "none")
                            //.style("stroke", function (d) { return color(d[0]); })
                            //.style("stroke-width", 0.3)
                            .style("fill-opacity", 0.2)
                            .style("fill", "#3b3eac");
                            //.style("fill", function (d) { return color(d[0]); });

    //add seq coint
    var counts = g.selectAll(".count")
                .data(seqObj)
             .enter()
                .append("text")
                                .attr({
                                    "alignment-baseline": "middle",
                                    "text-anchor": "middle"
                                })
                                .attr("y", function (d) { return d[3]+25; })
                                .attr("x", function (d) { return d[2]; })
                                .attr("id", function (d) { return d[1] + "-count" })
                                .attr("class", "count")
                                .attr("class", "noselect")
                                .attr("display", function (d) { return d[1] % 5 !== 0 ? "none" : "inline "; })
                                .attr("font-size", "10px")
                                .attr("font-family", "monospace")
                                .style("fill-opacity", 0.2)
                                .style("fill", "#3b3eac")
                                .text(function (d) { return d[1] + "" });

    /*
    var circles = g.selectAll(".circle")
                     .data(seqObj)
                  .enter()
                     .append("circle");
    var circleAttributes = circles
                            .attr("class", "circle")
                            .attr("class", "clickable")
                            .attr("id", function (d) { return d[1]+""})
                            .attr("cx", function (d) { return d[2]; })
                            .attr("cy", function (d) { return d[3]; })
                            .attr("r", r)
                            .style("stroke", "none")
                            //.style("stroke", function (d) { return color(d[0]); })
                            .style("stroke-width", 1.0)
                            .style("fill-opacity", 0.5)
                            .style("fill", "none");
                            //.style("fill", function (d) { return color(d[0]); });
    circleAttributes
        .on("mouseover", function (d) {
            var target = d3.select(this);
            var tx = d[2] + 4 * r;
            var ty = d[3] + 2 * r;

            var arc = d3.svg.arc()
                .outerRadius(5*r - 10)
                .innerRadius(r).startAngle(0).endAngle(2 * Math.PI);

            var pie = d3.layout.pie(function (d) { return d.v; });

            target.style("fill-opacity", 0.5)
                .style("fill", function () { return "#d62728"; });

            //add some buttons
            var tool = d3.select("svg").append("g").datum([d]).attr("transform", "translate(" + tx + "," + ty + ")");
            var toolcircle = tool.append("path").attr("class", "toolcircle")
                         .attr("d", arc)
                          .style("stroke", "#5254a3")
                            .style("stroke-width", 1.0)
                            .style("fill-opacity", 0.8)
                            .style("fill", "#66aa00");


            tool
                  .append("circle")
                            .attr("class", "ecircle")
                            .attr("class", "clickable")
                            .attr("id", function (d) { console.log(d);return "e-"+d[0][1]  })
                            //.attr("cx", function (d) { return d[0][2]; })
                            //.attr("cy", function (d) { return d[0][3]; })
                //need to prepare a dataset to control the position of button
                            .attr("r", r)
                            .style("stroke", color("A"))
                            .style("stroke-width", 1.0)
                            .style("fill-opacity", 0.8)
                            .style("fill", "#d62728");


        })
        .on("mouseout", function (d) {
            var target = d3.select(this);
            //console.log(d);
            target
                .style("fill-opacity", 0.5)
                .style("fill", function (d) { return color(d[0]); });
        });
*/

    //add text
    var text = g.selectAll(".letter")
                .data(seqObj)
             .enter()
                .append("text")
                                .attr({
                                    "alignment-baseline": "middle",
                                    "text-anchor": "middle"
                                })
                               .attr("y", function (d) { return d[3]; })
                                .attr("x", function (d) { return d[2]; })
                                .attr("class", "letter")
                                //.attr("class", "noselect")
                                .attr("class", "clickable")
                                .attr("id", function (d) { return d[1] + "-letter" })
                                .style("fill", function (d) { return color(d[0]); })
                                .text(function (d) { return d[0]+""});
    text.on("mouseover", function (d) {
        //============points and count===================
        var target = d3.select(this);
        //point
        var pointId = "#" + d[1] + "-point";
        var point = $(pointId);
        //count
        var countId = "#" + d[1] + "-count";
        var count = $(countId);
        if (d[1] % 5 === 0) {
            //point is original hidden, do nothing on point
            //test is original show, change the text color
            count.css({ "fill-opacity": 0.5 });
            count.css({ fill: "red" });

        }
        else {
            //point is originaly shown, hide it
            point.css({ display: "none" });
            //count is originally hiden, now show it
            count.css({display: "inline"});

                //change color
            count.css({ "fill-opacity": 0.5 });
            count.css({ fill: "red" });
        }
        //hide current letter
        target.attr("display", "none");
        //===========tool======================
        var tx = d[2] + 4 * r;
        var ty = d[3] + 2 * r+ 29;

        var arc = d3.svg.arc()
            .outerRadius(5 * r - 10)
            //.innerRadius(r)
            .startAngle(0);
            //.endAngle(2 * Math.PI);

        //var pie = d3.layout.pie(function (d) { return d.v; });

        var tool = d3.select("svg").append("g").attr("class", "tool").datum([d]).attr("transform", "translate(" + tx + "," + ty + ")");
        var toolcircle = tool.append("path").attr("class", "toolcircle")
                        .style("fill-opacity", 0.5)
                        .style("fill", "#00BCD4")
                        .on("mouseover", function () {
                            //here to add events


                        })
                        .on("mouseout", function (d) {
                            //hide tool
                            var tool = d3.selectAll(".toolcircle")
                                .transition().delay(50).attr("transform", "scale(0)");
                            //hide tool letter
                            var tool = d3.selectAll(".nletter")
                                .transition().delay(50).attr("display", "none");
                            //show original letter
                            target.attr("display", "inline");

                            //mouse out event


                        });
        var toolcircleShow = toolcircle
            .transition()
	        .duration(150)
            .attrTween("d", function (d, i, a) {
                var i = d3.interpolate(a, 2 * Math.PI);
                return arc.endAngle(i);
            });


        var letter = tool.append("text").attr("class", "nletter")
                            .attr({
                                "alignment-baseline": "middle",
                                "text-anchor": "middle"
                            })
                            .attr("id", function (d) { return d[0][1] + "-nletter" })
                                .style("fill", function (d) { return color(d[0][0]); })
                                .text(function (d) { return d[0][0]; });
        //need to add some tool buttons

    })
        .on("mouseout", function (d) {
            //============points and count===================
            //point
            var pointId = "#" + d[1] + "-point";
            var point = $(pointId);
            //count
            var countId = "#" + d[1] + "-count";
            var count = $(countId);

            if (d[1] % 5 === 0) {
                //point is original hidden, do nothing on point
                //test is original show, change the text color back
                count.css({ "fill-opacity" : 0.2 });
                count.css({ fill: "#3b3eac"});

            }
            else {

                //point is originaly shown, show it again
                point.css({display: "inline" });
                //count is originally hiden, now hidden it again
                count.css({display: "none"});

                    //change color back
                count.css({ "fill-opacity": 0.2 });
                count.css({ fill: "#3b3eac" });
            }
            //===========tool======================
            //var tool = d3.selectAll(".toolcircle")
            //    .transition().delay(50).attr("transform", "scale(0)");
        });

    function genArray(num) {
        var arr = [];
        for (var i = 1; i <= num; i++) {
            arr.push(i);
        }
        return arr;
    }

    function genSeqObj(seqArray, seq_len, numCol, numRow, xRange, yRange) {
        //seqArray

        //position array
        var posArray = genArray(seq_len);
        //cx array and cy array
        var cxArr = [];
        var cyArr = [];

        for (y1 = 0; y1 < numRow; y1++) {
            for (x1 = 0; x1 < numCol; x1++) {
                //left and top padding
                cxArr.push(x1 * xRange + xRange/2);
                cyArr.push(y1 * yRange + yRange/2);
            }
        }
        //remove extra items in cxArr and cyArr
        if (cxArr.length > seq_len) {
            cxArr.slice(0, seq_len - 1);
            cyArr.slice(0, seq_len - 1);
        }
        seqObj = d3.zip(seqArray, posArray, cxArr, cyArr);
        return seqObj;
    }

    function colores_google(n) {
        var colores_g = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return colores_g[n % colores_g.length];
    }
    $('.tick line').attr("stroke-dasharray", "6, 3, 3, 3");
</script>